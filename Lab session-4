-------------
TRIASA MUNSHI
ROLL-50
DEPT-CSE
YEAR-3RD
-------------
1. Write a program to perform the following:
i) take input through keyboard an IP address in either binary or dotted decimal notation
ii) display the output at the console which consists of:
	a) the class of the address
	b) the corresponding network address

2. Write a program to perform the following:
i) take input through keyboard
	a) the site address
	b) number of subnets required
ii) display the output at the console consisting of 
	a) subnet mask
	b) the starting and the last address for each subnet
	
---------
Problem-1
---------
import java.util.Scanner;
class NetworkId {
    static String findClass(String str){
        // Calculating first occurrence of '.' in str
        int index = str.indexOf('.');
        // First octate in str in decimal form
        String ipsub = str.substring(0,index);
        int ip = Integer.parseInt(ipsub);
        // Class A
        if (ip>=0 && ip<=127)
            return "A";
        // Class B
        else if (ip>=128 && ip<=191)
            return "B";
        // Class C
        else if (ip>=192 && ip<223)
            return "C";
        // Class D
        else if (ip >=224 && ip<=239)
            return "D";
        // Class E
        else
            return "E";
    }
 
    static void separate(String str, String ipClass) {
        // Initializing network and host empty
        String network = "", host = "";
 
        if(ipClass == "A") {
            int index = str.indexOf('.');
            network = str.substring(0, index);
            host = str.substring(index + 1, str.length());
        }
	else if(ipClass == "B") {
            //Position of breaking network and HOST id
            int index = -1;
            int dot = 2;
            for(int i=0;i<str.length();i++){
                if(str.charAt(i) == '.') {
                    dot -= 1;
                    if(dot == 0) {
                        index = i;
                        break;
                    }
                }
            }
            network = str.substring(0, index);
            host = str.substring(index + 1, str.length());
        }
	else if(ipClass == "C") {
            //Position of breaking network and HOST id
            int index = -1;
            int dot = 3;
            for(int i = 0 ; i <str.length(); i++) {
                if(str.charAt(i) == '.') {
                    dot -= 1;
                    if(dot == 0) {
                        index = i;
                        break;                    
                    }
                }
            }
            network = str.substring(0, index);
            host = str.substring(index + 1, str.length());
        }
	else if(ipClass == "D" || ipClass == "E") {
            System.out.println("In this Class, IP address is not divided into Network and Host IDs.");
            return;
        }
        System.out.println("Network ID is: "+ network);
        System.out.println("Host ID is: " + host);
    }
    public static void main(String[] args) {
	  Scanner sc = new Scanner(System.in);
	  System.out.print("Enter an IP address in dotted decimal format: ");
	  String str = sc.nextLine();
	  String ipClass = findClass(str);
	  System.out.println("Given IP address belongs to Class "+ ipClass);
	  separate(str, ipClass);
    }
}

---------
Problem-2
---------
import java.util.stream.Stream;
import java.util.Scanner;

class LinkedAddress{

    int val;
    LinkedAddress next;
    LinkedAddress(int val, LinkedAddress next){
        this.val = val;
        this.next = next;
    }

    void add(int val){
        if ( this.next != null )
            this.next.add( (int)(this.val + val) / 256 );
        this.val = ( this.val + val ) % 256;
    }
    @Override
    public String toString(){
        if (this.next != null )
            return this.next.toString() + "." + this.val;
        return Integer.toString(this.val);
    }
}
 class IP {

    private LinkedAddress head;
    private int suffix;
    private int[] site_address;
    
    int number_of_subnets;
    IP(String site_address, int number_of_subnets){
        int [] ip = {0,0,0,0};
        this.site_address = Stream.of(site_address.split("\\.")).mapToInt(x->Integer.parseInt(x)).toArray();
        this.number_of_subnets = number_of_subnets;
        if (this.site_address[0] < 128){
            this.suffix = 24;
            ip[0] = this.site_address[0];
        }
        else if (this.site_address[0] < (128+64)){
            this.suffix = 16;
            ip[0] = this.site_address[0];
            ip[1] = this.site_address[1];
        }
        else if (this.site_address[0] < (128+64+32)){
            this.suffix = 8;
            ip[0] = this.site_address[0];
            ip[1] = this.site_address[1];
            ip[2] = this.site_address[2];
        }
        head = new LinkedAddress(ip[3], new LinkedAddress(ip[2], new LinkedAddress(ip[1], new LinkedAddress(ip[0], null))));

        this.suffix = this.suffix - (int)Math.ceil(Math.log(number_of_subnets)/Math.log(2));
    }

    public String show_subnets(){
        int i;
        String output = "";
        for (i = 0; i < number_of_subnets; i++ ){
            if (i!= 0)
                this.head.add(1);
            output = output + "Subnet " + (i+1) + " : \nStarting address: " + this.head;
            this.head.add((int)Math.pow(2,suffix)-1);
            output = output + "\tEnding address: " + this.head + "\n\n";
        }
        return output;
    }

    public String subnet_mask(){
        int i,j,s;
        String output = "";
        int num_bits = (32-this.suffix);
        for (i = 0; i < (int)(num_bits / 8); i++){
            output = output + "255.";
        }
        i = i + 1;
        for(j = 0, s = 0; j < (num_bits % 8); j++){
            s = s + (int)Math.pow(2,(7-j));
        }
        output = output + s;
        for(;i < 4; i++){
            output = output + ".0";
        }
        return output;
    }

    @Override
    public String toString(){
        int i;
        String address = "";
        for(i = 0; i < 4; i++){
            address = address + this.site_address[i];
            if( i != 3 )
                address = address + ".";
        }
        return "The site address: " + address + "\nNumber of subnets: " + this.number_of_subnets + "\nSubnet Mask: " + this.subnet_mask() + "\n\n" + this.show_subnets();
    }
}

public class Subnets {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter an IP address in dotted decimal format: ");
        String enteredIP = sc.nextLine();
        System.out.println("Enter number of subnets: ");
        int enteredSubnets = sc.nextInt();
        IP address = new IP(enteredIP, enteredSubnets);
        System.out.println(address);
    }
}

//input: 
127.168.0.1
8
