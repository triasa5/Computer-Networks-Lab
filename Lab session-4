-------------
TRIASA MUNSHI
ROLL-50
DEPT-CSE
YEAR-3RD
-------------
1. Write a program to perform the following:
i) take input through keyboard an IP address in either binary or dotted decimal notation
ii) display the output at the console which consists of:
	a) the class of the address
	b) the corresponding network address

2. Write a program to perform the following:
i) take input through keyboard
	a) the site address
	b) number of subnets required
ii) display the output at the console consisting of 
	a) subnet mask
	b) the starting and the last address for each subnet
	
---------
Problem-1
---------
import java.util.Scanner;
class NetworkId {
    static String findClass(String str){
        // Calculating first occurrence of '.' in str
        int index = str.indexOf('.');
        // First octate in str in decimal form
        String ipsub = str.substring(0,index);
        int ip = Integer.parseInt(ipsub);
        // Class A
        if (ip>=0 && ip<=127)
            return "A";
        // Class B
        else if (ip>=128 && ip<=191)
            return "B";
        // Class C
        else if (ip>=192 && ip<223)
            return "C";
        // Class D
        else if (ip >=224 && ip<=239)
            return "D";
        // Class E
        else
            return "E";
    }
 
    static void separate(String str, String ipClass) {
        // Initializing network and host empty
        String network = "", host = "";
 
        if(ipClass == "A") {
            int index = str.indexOf('.');
            network = str.substring(0, index);
            host = str.substring(index + 1, str.length());
        }
	else if(ipClass == "B") {
            //Position of breaking network and HOST id
            int index = -1;
            int dot = 2;
            for(int i=0;i<str.length();i++){
                if(str.charAt(i) == '.') {
                    dot -= 1;
                    if(dot == 0) {
                        index = i;
                        break;
                    }
                }
            }
            network = str.substring(0, index);
            host = str.substring(index + 1, str.length());
        }
	else if(ipClass == "C") {
            //Position of breaking network and HOST id
            int index = -1;
            int dot = 3;
            for(int i = 0 ; i <str.length(); i++) {
                if(str.charAt(i) == '.') {
                    dot -= 1;
                    if(dot == 0) {
                        index = i;
                        break;                    
                    }
                }
            }
            network = str.substring(0, index);
            host = str.substring(index + 1, str.length());
        }
	else if(ipClass == "D" || ipClass == "E") {
            System.out.println("In this Class, IP address is not divided into Network and Host IDs.");
            return;
        }
        System.out.println("Network ID is: "+ network);
        System.out.println("Host ID is: " + host);
    }
    public static void main(String[] args) {
	  Scanner sc = new Scanner(System.in);
	  System.out.print("Enter an IP address in dotted decimal format: ");
	  String str = sc.nextLine();
	  String ipClass = findClass(str);
	  System.out.println("Given IP address belongs to Class "+ ipClass);
	  separate(str, ipClass);
    }
}

---------
Problem-2
---------
/******************************************************************************

                            Online Java Compiler.
                Code, Compile, Run and Debug java program online.
Write your code in this editor and press "Run" button to execute it.

*******************************************************************************/
import java.util.*;
public class Main
{
    static String findClass(String str){
        // Calculating first occurrence of '.' in str
        int index = str.indexOf('.');
        // First octate in str in decimal form
        String ipsub = str.substring(0,index);
        int ip = Integer.parseInt(ipsub);
        // Class A
        if (ip>=0 && ip<=127)
            return "A";
        // Class B
        else if (ip>=128 && ip<=191)
            return "B";
        // Class C
        else if (ip>=192 && ip<223)
            return "C";
        // Class D
        else if (ip >=224 && ip<=239)
            return "D";
        // Class E
        else
            return "E";
    }
    static void findSubnetMask(String adr, int subnet) {
        String cls = findClass(adr);
        int pow = (int)(Math.log(subnet) / Math.log(2));
        String mask = "";
        String binary = "";
        if (cls == "A") {
            if (pow <= 8) {
                for (int i = 0; i < pow; i++) {
                    binary += "1";
                }
                for (int i = 0; i < 8 - pow; i++){
                    binary += "0";
                }
                int dec = Integer.parseInt(binary, 2);
                String dectoString = Integer.toString(dec);
                mask = "255." + dectoString + ".0.0";
            }
            else {
                int rest = pow - 8;
                for (int i = 0; i < rest; i++) {
                    binary += "1";
                }
                for (int i = 0; i < 8 - rest; i++) {
                    binary += "0";
                }
                int dec = Integer.parseInt(binary, 2);
                String dectoString = Integer.toString(dec);
                mask = "255.255." + dectoString + ".0";
            }
            System.out.println("The subnet mask is: " + mask);
        }
        else if (cls == "B") {
            if (pow <= 8) {
                for (int i = 0; i < pow; i++) {
                    binary += "1";
                }
                for (int i = 0; i < 8 - pow; i++) {
                    binary += "0";
                }
                int dec = Integer.parseInt(binary, 2);
                String dectoString = Integer.toString(dec);
                mask = "255.255." + dectoString + ".0";
            }
            else {
                int rest = pow - 8;
                for (int i = 0; i < pow - 8; i++) {
                    binary += "1";
                }
                for (int i = 0; i < 8 - rest; i++) {
                    binary += "0";
                }
                int dec = Integer.parseInt(binary, 2);
                String dectoString = Integer.toString(dec);
                mask = "255.255.255." + dectoString;
            }
            System.out.println("The subnet mask is: " + mask);
        }
        else if (cls == "C") {
            if (pow <= 8) {
                for (int i = 0; i < pow; i++) {
                    binary += "1";
                }
                for (int i = 0; i < 8 - pow; i++){
                    binary += "0";
                }
                int dec = Integer.parseInt(binary, 2);
                String dectoString = Integer.toString(dec);
                mask = "255.255.255" + dectoString;
                System.out.println("The subnet mask is: " + mask);
            }
            else {
                System.out.println("Inappropriate number of subnets.");
            }
        }
        else if (cls == "D" || cls == "E") {
            System.out.println("Class D and E has no subnet mask!");
            return;
        }
    }
    public static void main(String[] args) {
	Scanner sc = new Scanner(System.in);
	System.out.print("Enter an IP address in dotted decimal format: ");
	String adr = sc.nextLine();
	System.out.print("Enter the number of subnets: ");
	int subnet = sc.nextInt();
	findSubnetMask(adr, subnet);
    }
}


rough:
static void findAddresses(String adr, int subnet) {
        int index = adr.indexOf("/");
        String str = adr.substring(index + 1, adr.length());
        int prefix = Integer.parseInt(str);
        int suffix = 32 - prefix;
        int total = Math.pow(2, suffix);   
        int adrPerSubnet = total / subnet;
        int subnetSuffix = (int)(Math.log(adrPerSubnet) / Math.log(2));
        int subnetPrefix = 32 - subnetSuffix;
        for (int i = 1; i <= subnet; i ++) {
            if (i == 1) {
                System.out.println("First address of subnet number " + i + ": " + adr.substring(0, index) + "/" + subnetPrefix);
            }
            else {
                System.out.println("First address of subnet number " + i + ": " + adr.substring(0, index) + "/" + subnetPrefix);
            }
            int in = -1;
            int dot = 3;
            for(int i = 0 ; i <adr.length(); i++) {
                if(adr.charAt(i) == '.') {
                    dot -= 1;
                    if(dot == 0) {
                        in = i;
                        break;                    
                    }
                }
            }
            
            String end = adr.substring(in + 1, index);
            int endInt = Integer.parseInt(end);
            int newEnd = endInt + adrPerSubnet;
            System.out.println("Last address of subnet number " + i + ": " + adr.substring(0,in) + Integer.toString(newEnd) "/" + subnetPrefix);
            endInt += 1;
        }
    }
